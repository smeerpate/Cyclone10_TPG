#ifndef __MIXER_HPP__
#define __MIXER_HPP__

#include "VipCore.hpp"
#include "MixerLayer.hpp"

class Mixer : public VipCore {
private:
    Mixer(const Mixer&);  // Disable the copy constructor

public:
    // Mixer II specific registers
    enum MixerRegisterType {
        MIX_TPG_WIDTH         = 3,
        MIX_TPG_HEIGHT        = 4,
        MIX_TPG_COLOR_1       = 5,
        MIX_TPG_COLOR_2       = 6,
        MIX_TPG_COLOR_3       = 7,
        MIX_LAYER_BASE        = 8,
    };

    /*
     * @brief   constructor
     * @param   base_address        the base address of this mixer slave interface
     * @param   num_inputs          the number of inputs
     */
    Mixer(unsigned long base_address, unsigned int num_inputs);

    /*
     * @brief   destructor
     */
    ~Mixer();

    /*
     * @brief   Change the width of the background (generated by the TPG)
     * @param   width         New background width
     */
    inline void set_background_width(unsigned int width) {
        do_write(MIX_TPG_WIDTH, width);
    }

    /*
     * @brief   Change the height of the background (generated by the TPG)
     * @param   height        New background height
     */
    inline void set_background_height(unsigned int height) {
        do_write(MIX_TPG_HEIGHT, height);
    }

    /*
     * @brief   Change the resolution of the background (generated by the TPG)
     * @param   width         New background width
     * @param   height        New background height
     */
    void set_background_resolution(unsigned int width, unsigned int height);

    /*
     * @brief   Change the constant value used to generate the first color plane of the uniform background (generated by the TPG)
     * @param   color_1       New color sample for the first color plane
     */
    inline void set_background_color_1(unsigned int color_1) {
        do_write(MIX_TPG_COLOR_1, color_1);
    }


    /*
     * @brief   Change the constant value used to generate the first color plane of the uniform background (generated by the TPG)
     * @param   color_2       New color sample for the second color plane
     */
    inline void set_background_color_2(unsigned int color_2) {
        do_write(MIX_TPG_COLOR_2, color_2);
    }

    /*
     * @brief   Change the constant value used to generate the first color plane of the uniform background (generated by the TPG)
     * @param   color_3       New color sample for the third color plane
     */
    inline void set_background_color_3(unsigned int color_3) {
        do_write(MIX_TPG_COLOR_3, color_3);
    }

    /*
     * @brief   Change the uniform color of the background (generated by the TPG)
     * @param   color_1       New color sample for the first color plane
     * @param   color_2       New color sample for the second color plane
     * @param   color_3       New color sample for the third color plane
     */
    void set_background_color(unsigned int color_1, unsigned int color_2, unsigned int color_3);

    /*
     * @brief   Accessor to the slave registers of a designed mixer layer
     * @param   index   the index of the layer
     * @pre     the layer index is in the range [0..number_inputs]
     */
    inline MixerLayer& get_layer(int index) {
        return *(this->layers[index]);
    }

    /*
     * @brief   Accessor to the slave registers of a designed mixer layer
     * @param   index   the index of the layer
     * @pre     the layer index is in the range [0..number_inputs-1]
     */
    inline MixerLayer& operator [] (int index) {
        return *(this->layers[index]);
    }

    /*
     * @brief   Function to issue a write on a specific mixer layer register
     * @param   layer_offset   the base offset of the layer registers
     * @param   reg_offset     the offset of the targetted register among the set of registers for the layer
     * @param   value          the new value
     * @pre     the offsets are valid
     */
    inline void layer_do_write(unsigned long layer_offset, unsigned long reg_offset, unsigned int value)
    {
        do_write(layer_offset + reg_offset, value);
    }

private:
    unsigned int num_inputs;
    MixerLayer** layers;
};

#endif   // __MIXER_HPP__
