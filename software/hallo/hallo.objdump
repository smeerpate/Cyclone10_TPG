
hallo.elf:     file format elf32-littlenios2
hallo.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02004020

Program Header:
    LOAD off    0x00001000 vaddr 0x02004000 paddr 0x02004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02004020 paddr 0x02004020 align 2**12
         filesz 0x0000021c memsz 0x0000021c flags r-x
    LOAD off    0x00002000 vaddr 0x00000000 paddr 0x0200423c align 2**12
         filesz 0x0000001c memsz 0x00000028 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02004000  02004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  02004020  02004020  0000201c  2**0
                  CONTENTS
  2 .text         0000021c  02004020  02004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00000000  0200423c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  00000018  02004254  00002018  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  0000001c  02004258  0000201c  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00000028  00000028  0000201c  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  02004258  02004258  0000201c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000168  00000000  00000000  00002040  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00000aeb  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000630  00000000  00000000  00002c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000712  00000000  00000000  000032c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000190  00000000  00000000  000039d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000005cc  00000000  00000000  00003b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000101  00000000  00000000  00004134  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00004238  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000088  00000000  00000000  00004248  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000050c6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000050c9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000050d5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000050d6  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000050d7  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000050e2  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000050ed  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  000050f8  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000037  00000000  00000000  00005100  2**0
                  CONTENTS, READONLY
 27 .jdi          00004f20  00000000  00000000  00005137  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0005656a  00000000  00000000  0000a057  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02004000 l    d  .entry	00000000 .entry
02004020 l    d  .exceptions	00000000 .exceptions
02004020 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000018 l    d  .rwdata	00000000 .rwdata
0000001c l    d  .bss	00000000 .bss
00000028 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
02004258 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hallo_bsp//obj/HAL/src/crt0.o
02004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
02004154 g     F .text	0000002c alt_main
02004254 g       *ABS*	00000000 __flash_rwdata_start
02004180 g     F .text	00000038 alt_putstr
02004218 g     F .text	00000008 altera_nios2_gen2_irq_init
02004000 g     F .entry	0000000c __reset
02004020 g       *ABS*	00000000 __flash_exceptions_start
00000020 g     O .bss	00000004 alt_argv
00008018 g       *ABS*	00000000 _gp
02004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000028 g       *ABS*	00000000 __bss_end
02004210 g     F .text	00000004 alt_dcache_flush_all
0000001c g       *ABS*	00000000 __ram_rwdata_end
00000018 g       *ABS*	00000000 __ram_rodata_end
00000018 g     O .rwdata	00000004 jtag_uart_0
00000028 g       *ABS*	00000000 end
02000000 g       *ABS*	00000000 __alt_stack_pointer
020041dc g     F .text	00000034 altera_avalon_jtag_uart_write
02004020 g     F .text	0000003c _start
020041d8 g     F .text	00000004 alt_sys_init
00000018 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00000028 g       *ABS*	00000000 __alt_stack_base
0000001c g       *ABS*	00000000 __bss_start
0200405c g     F .text	00000018 main
0000001c g     O .bss	00000004 alt_envp
0200423c g       *ABS*	00000000 __flash_rodata_start
020041b8 g     F .text	00000020 alt_irq_init
00000024 g     O .bss	00000004 alt_argc
02004020 g       *ABS*	00000000 __ram_exceptions_start
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0000001c g       *ABS*	00000000 _edata
00000028 g       *ABS*	00000000 _end
02004020 g       *ABS*	00000000 __ram_exceptions_end
02000000 g       *ABS*	00000000 __alt_data_end
0200400c g       .entry	00000000 _exit
02004220 g     F .text	0000001c strlen
02004214 g     F .text	00000004 alt_icache_flush_all
02004074 g     F .text	000000e0 alt_load



Disassembly of section .entry:

02004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2004000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2004004:	08500814 	ori	at,at,16416
    jmp r1
 2004008:	0800683a 	jmp	at

0200400c <_exit>:
	...

Disassembly of section .text:

02004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2004020:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 2004024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2004028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 200402c:	d6a00614 	ori	gp,gp,32792
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2004030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 2004034:	10800714 	ori	r2,r2,28

    movhi r3, %hi(__bss_end)
 2004038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 200403c:	18c00a14 	ori	r3,r3,40

    beq r2, r3, 1f
 2004040:	10c00326 	beq	r2,r3,2004050 <_start+0x30>

0:
    stw zero, (r2)
 2004044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2004048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200404c:	10fffd36 	bltu	r2,r3,2004044 <__flash_rwdata_start+0xfffffdf0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2004050:	20040740 	call	2004074 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2004054:	20041540 	call	2004154 <alt_main>

02004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2004058:	003fff06 	br	2004058 <__flash_rwdata_start+0xfffffe04>

0200405c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
 200405c:	01000034 	movhi	r4,0
 */

#include "sys/alt_stdio.h"

int main()
{ 
 2004060:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
 2004064:	21000004 	addi	r4,r4,0
 */

#include "sys/alt_stdio.h"

int main()
{ 
 2004068:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
 200406c:	20041800 	call	2004180 <alt_putstr>
 2004070:	003fff06 	br	2004070 <__flash_rwdata_start+0xfffffe1c>

02004074 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2004074:	deffff04 	addi	sp,sp,-4
 2004078:	01000034 	movhi	r4,0
 200407c:	01408034 	movhi	r5,512
 2004080:	dfc00015 	stw	ra,0(sp)
 2004084:	21000604 	addi	r4,r4,24
 2004088:	29509504 	addi	r5,r5,16980

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 200408c:	2140061e 	bne	r4,r5,20040a8 <alt_load+0x34>
 2004090:	01008034 	movhi	r4,512
 2004094:	01408034 	movhi	r5,512
 2004098:	21100804 	addi	r4,r4,16416
 200409c:	29500804 	addi	r5,r5,16416
 20040a0:	2140121e 	bne	r4,r5,20040ec <alt_load+0x78>
 20040a4:	00000b06 	br	20040d4 <alt_load+0x60>
 20040a8:	00c00034 	movhi	r3,0
 20040ac:	18c00704 	addi	r3,r3,28
 20040b0:	1907c83a 	sub	r3,r3,r4
 20040b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 20040b8:	10fff526 	beq	r2,r3,2004090 <__flash_rwdata_start+0xfffffe3c>
    {
      *to++ = *from++;
 20040bc:	114f883a 	add	r7,r2,r5
 20040c0:	39c00017 	ldw	r7,0(r7)
 20040c4:	110d883a 	add	r6,r2,r4
 20040c8:	10800104 	addi	r2,r2,4
 20040cc:	31c00015 	stw	r7,0(r6)
 20040d0:	003ff906 	br	20040b8 <__flash_rwdata_start+0xfffffe64>
 20040d4:	01000034 	movhi	r4,0
 20040d8:	01408034 	movhi	r5,512
 20040dc:	21000004 	addi	r4,r4,0
 20040e0:	29508f04 	addi	r5,r5,16956

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 20040e4:	2140101e 	bne	r4,r5,2004128 <alt_load+0xb4>
 20040e8:	00000b06 	br	2004118 <alt_load+0xa4>
 20040ec:	00c08034 	movhi	r3,512
 20040f0:	18d00804 	addi	r3,r3,16416
 20040f4:	1907c83a 	sub	r3,r3,r4
 20040f8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 20040fc:	10fff526 	beq	r2,r3,20040d4 <__flash_rwdata_start+0xfffffe80>
    {
      *to++ = *from++;
 2004100:	114f883a 	add	r7,r2,r5
 2004104:	39c00017 	ldw	r7,0(r7)
 2004108:	110d883a 	add	r6,r2,r4
 200410c:	10800104 	addi	r2,r2,4
 2004110:	31c00015 	stw	r7,0(r6)
 2004114:	003ff906 	br	20040fc <__flash_rwdata_start+0xfffffea8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2004118:	20042100 	call	2004210 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 200411c:	dfc00017 	ldw	ra,0(sp)
 2004120:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 2004124:	20042141 	jmpi	2004214 <alt_icache_flush_all>
 2004128:	00c00034 	movhi	r3,0
 200412c:	18c00604 	addi	r3,r3,24
 2004130:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2004134:	0005883a 	mov	r2,zero
  {
    while( to != end )
 2004138:	18bff726 	beq	r3,r2,2004118 <__flash_rwdata_start+0xfffffec4>
    {
      *to++ = *from++;
 200413c:	114f883a 	add	r7,r2,r5
 2004140:	39c00017 	ldw	r7,0(r7)
 2004144:	110d883a 	add	r6,r2,r4
 2004148:	10800104 	addi	r2,r2,4
 200414c:	31c00015 	stw	r7,0(r6)
 2004150:	003ff906 	br	2004138 <__flash_rwdata_start+0xfffffee4>

02004154 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2004154:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2004158:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200415c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2004160:	20041b80 	call	20041b8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2004164:	20041d80 	call	20041d8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 2004168:	d1a00117 	ldw	r6,-32764(gp)
 200416c:	d1600217 	ldw	r5,-32760(gp)
 2004170:	d1200317 	ldw	r4,-32756(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 2004174:	dfc00017 	ldw	ra,0(sp)
 2004178:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 200417c:	200405c1 	jmpi	200405c <main>

02004180 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 2004180:	defffe04 	addi	sp,sp,-8
 2004184:	dc000015 	stw	r16,0(sp)
 2004188:	dfc00115 	stw	ra,4(sp)
 200418c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 2004190:	20042200 	call	2004220 <strlen>
 2004194:	01000034 	movhi	r4,0
 2004198:	000f883a 	mov	r7,zero
 200419c:	100d883a 	mov	r6,r2
 20041a0:	800b883a 	mov	r5,r16
 20041a4:	21000604 	addi	r4,r4,24
#else
    return fputs(str, stdout);
#endif
#endif
}
 20041a8:	dfc00117 	ldw	ra,4(sp)
 20041ac:	dc000017 	ldw	r16,0(sp)
 20041b0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 20041b4:	20041dc1 	jmpi	20041dc <altera_avalon_jtag_uart_write>

020041b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 20041b8:	deffff04 	addi	sp,sp,-4
 20041bc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 20041c0:	20042180 	call	2004218 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 20041c4:	00800044 	movi	r2,1
 20041c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 20041cc:	dfc00017 	ldw	ra,0(sp)
 20041d0:	dec00104 	addi	sp,sp,4
 20041d4:	f800283a 	ret

020041d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 20041d8:	f800283a 	ret

020041dc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 20041dc:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 20041e0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 20041e4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 20041e8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 20041ec:	2980072e 	bgeu	r5,r6,200420c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 20041f0:	38c00037 	ldwio	r3,0(r7)
 20041f4:	18ffffec 	andhi	r3,r3,65535
 20041f8:	183ffc26 	beq	r3,zero,20041ec <__flash_rwdata_start+0xffffff98>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 20041fc:	28c00007 	ldb	r3,0(r5)
 2004200:	20c00035 	stwio	r3,0(r4)
 2004204:	29400044 	addi	r5,r5,1
 2004208:	003ff806 	br	20041ec <__flash_rwdata_start+0xffffff98>

  return count;
}
 200420c:	f800283a 	ret

02004210 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2004210:	f800283a 	ret

02004214 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2004214:	f800283a 	ret

02004218 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 2004218:	000170fa 	wrctl	ienable,zero
 200421c:	f800283a 	ret

02004220 <strlen>:
 2004220:	2005883a 	mov	r2,r4
 2004224:	10c00007 	ldb	r3,0(r2)
 2004228:	18000226 	beq	r3,zero,2004234 <strlen+0x14>
 200422c:	10800044 	addi	r2,r2,1
 2004230:	003ffc06 	br	2004224 <__flash_rwdata_start+0xffffffd0>
 2004234:	1105c83a 	sub	r2,r2,r4
 2004238:	f800283a 	ret
