
hallo1.elf:     file format elf32-littlenios2
hallo1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000ae4 memsz 0x00000ae4 flags r-x
    LOAD off    0x00001b04 vaddr 0x00002b04 paddr 0x00002b0c align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x00001b14 vaddr 0x00002b14 paddr 0x00002b14 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00002020  00002020  00001b0c  2**0
                  CONTENTS
  2 .text         000009a0  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000144  000029c0  000029c0  000019c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  00002b04  00002b0c  00001b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00002b14  00002b14  00001b14  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00002b24  00002b24  00001b0c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000260  00000000  00000000  00001b30  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00001961  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000c1e  00000000  00000000  000036f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000d29  00000000  00000000  0000430f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000364  00000000  00000000  00005038  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000009b7  00000000  00000000  0000539c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c83  00000000  00000000  00005d53  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000069d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000128  00000000  00000000  00006a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00007b16  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00007b19  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00007b25  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00007b26  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000006  00000000  00000000  00007b27  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000006  00000000  00000000  00007b2d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000006  00000000  00000000  00007b33  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00007b39  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000037  00000000  00000000  00007b41  2**0
                  CONTENTS, READONLY
 26 .jdi          00005000  00000000  00000000  00007b78  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000675a7  00000000  00000000  0000cb78  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002020 l    d  .text	00000000 .text
000029c0 l    d  .rodata	00000000 .rodata
00002b04 l    d  .rwdata	00000000 .rwdata
00002b14 l    d  .bss	00000000 .bss
00002b24 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hallo1_bsp//obj/HAL/src/crt0.o
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00002490 g     F .text	0000002c alt_main
00002b0c g       *ABS*	00000000 __flash_rwdata_start
00002130 g     F .text	00000014 setSize
00002674 g     F .text	00000038 alt_putstr
000027e8 g     F .text	00000008 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002b20 g     O .bss	00000004 errno
00002b18 g     O .bss	00000004 alt_argv
0000ab04 g       *ABS*	00000000 _gp
000026ac g     F .text	00000004 usleep
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002904 g     F .text	00000064 .hidden __udivsi3
00002b24 g       *ABS*	00000000 __bss_end
000020f8 g     F .text	00000038 printStatus
0000205c g     F .text	00000088 waitWithLed
000027e0 g     F .text	00000004 alt_dcache_flush_all
00002b0c g       *ABS*	00000000 __ram_rwdata_end
00002b04 g       *ABS*	00000000 __ram_rodata_end
00002968 g     F .text	00000058 .hidden __umodsi3
00002b24 g       *ABS*	00000000 end
000026d4 g     F .text	00000084 altera_avalon_uart_write
00004000 g       *ABS*	00000000 __alt_stack_pointer
000024bc g     F .text	00000170 alt_printf
00002020 g     F .text	0000003c _start
000026d0 g     F .text	00000004 alt_sys_init
00002388 g     F .text	00000028 .hidden __mulsi3
00002b04 g       *ABS*	00000000 __ram_rwdata_start
000029c0 g       *ABS*	00000000 __ram_rodata_start
00002758 g     F .text	00000088 alt_busy_sleep
000020e4 g     F .text	00000014 setStartPosition
00002b24 g       *ABS*	00000000 __alt_stack_base
00002b14 g       *ABS*	00000000 __bss_start
00002144 g     F .text	00000244 main
00002b14 g     O .bss	00000004 alt_envp
00002b04 g     O .rwdata	00000004 uart_0
00002b08 g     O .rwdata	00000004 alt_errno
0000280c g     F .text	00000084 .hidden __divsi3
000029c0 g       *ABS*	00000000 __flash_rodata_start
000026b0 g     F .text	00000020 alt_irq_init
00002b1c g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002b0c g       *ABS*	00000000 _edata
00002b24 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
00002890 g     F .text	00000074 .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
000027f0 g     F .text	0000001c strlen
0000262c g     F .text	00000048 alt_putchar
000027e4 g     F .text	00000004 alt_icache_flush_all
000023b0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6aac114 	ori	gp,gp,43780
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	108ac514 	ori	r2,r2,11028

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18cac914 	ori	r3,r3,11044

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_gp+0xffff7540>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	00023b00 	call	23b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00024900 	call	2490 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <_gp+0xffff7554>

0000205c <waitWithLed>:

  return 0;
}

void waitWithLed(int ticks, int tickTimeMs)
{
    205c:	defffa04 	addi	sp,sp,-24
    2060:	dcc00315 	stw	r19,12(sp)
    2064:	2027883a 	mov	r19,r4
	for (int i = 0; i < ticks; i++)
		{
		  IOWR(PIO_0_BASE, 0x00, 0x3);
		  usleep(tickTimeMs/2 * 1000);
    2068:	2808d7fa 	srli	r4,r5,31

  return 0;
}

void waitWithLed(int ticks, int tickTimeMs)
{
    206c:	dd000415 	stw	r20,16(sp)
    2070:	dc800215 	stw	r18,8(sp)
	for (int i = 0; i < ticks; i++)
		{
		  IOWR(PIO_0_BASE, 0x00, 0x3);
		  usleep(tickTimeMs/2 * 1000);
    2074:	2149883a 	add	r4,r4,r5
    2078:	2009d07a 	srai	r4,r4,1
    207c:	0140fa04 	movi	r5,1000

  return 0;
}

void waitWithLed(int ticks, int tickTimeMs)
{
    2080:	dc400115 	stw	r17,4(sp)
    2084:	dc000015 	stw	r16,0(sp)
    2088:	dfc00515 	stw	ra,20(sp)
	for (int i = 0; i < ticks; i++)
		{
		  IOWR(PIO_0_BASE, 0x00, 0x3);
		  usleep(tickTimeMs/2 * 1000);
    208c:	00023880 	call	2388 <__mulsi3>
    2090:	1023883a 	mov	r17,r2
  return 0;
}

void waitWithLed(int ticks, int tickTimeMs)
{
	for (int i = 0; i < ticks; i++)
    2094:	0021883a 	mov	r16,zero
		{
		  IOWR(PIO_0_BASE, 0x00, 0x3);
    2098:	050000c4 	movi	r20,3
    209c:	04900004 	movi	r18,16384
  return 0;
}

void waitWithLed(int ticks, int tickTimeMs)
{
	for (int i = 0; i < ticks; i++)
    20a0:	84c0080e 	bge	r16,r19,20c4 <waitWithLed+0x68>
		{
		  IOWR(PIO_0_BASE, 0x00, 0x3);
    20a4:	95000035 	stwio	r20,0(r18)
		  usleep(tickTimeMs/2 * 1000);
    20a8:	8809883a 	mov	r4,r17
    20ac:	00026ac0 	call	26ac <usleep>
		  IOWR(PIO_0_BASE, 0x00, 0x0);
    20b0:	90000035 	stwio	zero,0(r18)
		  usleep(tickTimeMs/2 * 1000);
    20b4:	8809883a 	mov	r4,r17
    20b8:	00026ac0 	call	26ac <usleep>
  return 0;
}

void waitWithLed(int ticks, int tickTimeMs)
{
	for (int i = 0; i < ticks; i++)
    20bc:	84000044 	addi	r16,r16,1
    20c0:	003ff706 	br	20a0 <_gp+0xffff759c>
		  usleep(tickTimeMs/2 * 1000);
		  IOWR(PIO_0_BASE, 0x00, 0x0);
		  usleep(tickTimeMs/2 * 1000);
		}
	return;
}
    20c4:	dfc00517 	ldw	ra,20(sp)
    20c8:	dd000417 	ldw	r20,16(sp)
    20cc:	dcc00317 	ldw	r19,12(sp)
    20d0:	dc800217 	ldw	r18,8(sp)
    20d4:	dc400117 	ldw	r17,4(sp)
    20d8:	dc000017 	ldw	r16,0(sp)
    20dc:	dec00604 	addi	sp,sp,24
    20e0:	f800283a 	ret

000020e4 <setStartPosition>:

void setStartPosition(int x, int y)
{
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_XOFFSET , x);
    20e4:	00800804 	movi	r2,32
    20e8:	11000035 	stwio	r4,0(r2)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_YOFFSET , y);
    20ec:	00800904 	movi	r2,36
    20f0:	11400035 	stwio	r5,0(r2)
    20f4:	f800283a 	ret

000020f8 <printStatus>:
}

void printStatus()
{
    20f8:	deffff04 	addi	sp,sp,-4
	int status;

	status = IORD(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_STATUS);
    20fc:	00800104 	movi	r2,4
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_XOFFSET , x);
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_YOFFSET , y);
}

void printStatus()
{
    2100:	dfc00015 	stw	ra,0(sp)
	int status;

	status = IORD(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_STATUS);
    2104:	11400037 	ldwio	r5,0(r2)
	alt_printf("***  Mixer status is nu:  %x  ***\n\r", status);
    2108:	01000034 	movhi	r4,0
    210c:	210a7004 	addi	r4,r4,10688
    2110:	00024bc0 	call	24bc <alt_printf>
	status = IORD(MAIN_SCALER_BASE, REG_SCAL_STATUS);
    2114:	00940104 	movi	r2,20484
    2118:	11400037 	ldwio	r5,0(r2)
	alt_printf("***  Scaler status is nu: %x  ***\n\r", status);
    211c:	01000034 	movhi	r4,0
    2120:	210a7904 	addi	r4,r4,10724
	return;
}
    2124:	dfc00017 	ldw	ra,0(sp)
    2128:	dec00104 	addi	sp,sp,4
	int status;

	status = IORD(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_STATUS);
	alt_printf("***  Mixer status is nu:  %x  ***\n\r", status);
	status = IORD(MAIN_SCALER_BASE, REG_SCAL_STATUS);
	alt_printf("***  Scaler status is nu: %x  ***\n\r", status);
    212c:	00024bc1 	jmpi	24bc <alt_printf>

00002130 <setSize>:
	return;
}

void setSize(int x, int y)
{
	IOWR(MAIN_SCALER_BASE, REG_SCAL_WIDTH , x);
    2130:	00940304 	movi	r2,20492
    2134:	11000035 	stwio	r4,0(r2)
	IOWR(MAIN_SCALER_BASE, REG_SCAL_HEIGHT , y);
    2138:	00940404 	movi	r2,20496
    213c:	11400035 	stwio	r5,0(r2)
    2140:	f800283a 	ret

00002144 <main>:
void printStatus();
void setSize(int x, int y);


int main()
{
    2144:	defff604 	addi	sp,sp,-40
    2148:	dfc00915 	stw	ra,36(sp)
    214c:	dc400215 	stw	r17,8(sp)
    2150:	dc000115 	stw	r16,4(sp)
    2154:	ddc00815 	stw	r23,32(sp)
    2158:	dd800715 	stw	r22,28(sp)
    215c:	dd400615 	stw	r21,24(sp)
    2160:	dd000515 	stw	r20,20(sp)
    2164:	dcc00415 	stw	r19,16(sp)
    2168:	dc800315 	stw	r18,12(sp)
	int x_pos = 0, y_pos = 0;
	int width = 100, height = 100;
	int max_pos = 50;

	printStatus();
    216c:	00020f80 	call	20f8 <printStatus>

	alt_putstr("\n\rInitializeren van mixer en scaler na LED geroffel...");
    2170:	01000034 	movhi	r4,0
    2174:	210a8204 	addi	r4,r4,10760
    2178:	00026740 	call	2674 <alt_putstr>
	waitWithLed(60, 40);
    217c:	04000a04 	movi	r16,40
    2180:	800b883a 	mov	r5,r16
    2184:	01000f04 	movi	r4,60
    2188:	000205c0 	call	205c <waitWithLed>
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_CONTROL, 0x1);
    218c:	04400044 	movi	r17,1
    2190:	0005883a 	mov	r2,zero
    2194:	14400035 	stwio	r17,0(r2)
	IOWR(MAIN_SCALER_BASE, REG_SCAL_CONTROL, 0x1);
    2198:	00940004 	movi	r2,20480
    219c:	14400035 	stwio	r17,0(r2)
	alt_putstr("-->Klaar met instellen.\n\r");
    21a0:	01000034 	movhi	r4,0
    21a4:	210a9004 	addi	r4,r4,10816
    21a8:	00026740 	call	2674 <alt_putstr>
	printStatus();
    21ac:	00020f80 	call	20f8 <printStatus>

	waitWithLed(2, 1000);
    21b0:	0140fa04 	movi	r5,1000
    21b4:	01000084 	movi	r4,2
    21b8:	000205c0 	call	205c <waitWithLed>

	alt_putstr("beginpositie instellen na LED geroffel...");
    21bc:	01000034 	movhi	r4,0
    21c0:	210a9704 	addi	r4,r4,10844
    21c4:	00026740 	call	2674 <alt_putstr>
	waitWithLed(60, 40);
    21c8:	800b883a 	mov	r5,r16
    21cc:	01000f04 	movi	r4,60
    21d0:	000205c0 	call	205c <waitWithLed>
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_XOFFSET , 30);
    21d4:	00800784 	movi	r2,30
    21d8:	04800804 	movi	r18,32
    21dc:	90800035 	stwio	r2,0(r18)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_YOFFSET , 30);
    21e0:	04c00904 	movi	r19,36
    21e4:	98800035 	stwio	r2,0(r19)
	alt_putstr("-->Klaar met instellen.\n\r");
    21e8:	01000034 	movhi	r4,0
    21ec:	210a9004 	addi	r4,r4,10816
    21f0:	00026740 	call	2674 <alt_putstr>
	printStatus();
    21f4:	00020f80 	call	20f8 <printStatus>

	waitWithLed(2, 1000);
    21f8:	0140fa04 	movi	r5,1000
    21fc:	01000084 	movi	r4,2
    2200:	000205c0 	call	205c <waitWithLed>

	alt_putstr("scaler grootte instellen na LED geroffel...");
    2204:	01000034 	movhi	r4,0
    2208:	210aa204 	addi	r4,r4,10888
    220c:	00026740 	call	2674 <alt_putstr>
	waitWithLed(60, 40);
    2210:	800b883a 	mov	r5,r16
    2214:	01000f04 	movi	r4,60
    2218:	000205c0 	call	205c <waitWithLed>
	IOWR(MAIN_SCALER_BASE, REG_SCAL_WIDTH , width);
    221c:	00801904 	movi	r2,100
    2220:	05140304 	movi	r20,20492
    2224:	a0800035 	stwio	r2,0(r20)
	IOWR(MAIN_SCALER_BASE, REG_SCAL_HEIGHT , height);
    2228:	00d40404 	movi	r3,20496
    222c:	18800035 	stwio	r2,0(r3)
	alt_putstr("-->Klaar met instellen.\n\r");
    2230:	01000034 	movhi	r4,0
    2234:	210a9004 	addi	r4,r4,10816
    2238:	00026740 	call	2674 <alt_putstr>
	printStatus();
    223c:	00020f80 	call	20f8 <printStatus>

	waitWithLed(2, 1000);
    2240:	0140fa04 	movi	r5,1000
    2244:	01000084 	movi	r4,2
    2248:	000205c0 	call	205c <waitWithLed>
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_INPUTCONTROL , 0x3);
	alt_putstr("-->Klaar met instellen.\n\r");

	waitWithLed(6, 1000);
*/
	alt_putstr("enable input 0 na LED geroffel...");
    224c:	01000034 	movhi	r4,0
    2250:	210aad04 	addi	r4,r4,10932
    2254:	00026740 	call	2674 <alt_putstr>
	waitWithLed(60, 40);
    2258:	800b883a 	mov	r5,r16
    225c:	01000f04 	movi	r4,60
    2260:	000205c0 	call	205c <waitWithLed>
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_INPUTCONTROL , 0x1);
    2264:	84400035 	stwio	r17,0(r16)
	alt_putstr("-->Klaar met instellen.\n\r");
    2268:	01000034 	movhi	r4,0
    226c:	210a9004 	addi	r4,r4,10816
    2270:	00026740 	call	2674 <alt_putstr>
	printStatus();
    2274:	00020f80 	call	20f8 <printStatus>

	alt_putstr("Dat was het.\n\r");
    2278:	01000034 	movhi	r4,0
    227c:	210ab604 	addi	r4,r4,10968
    2280:	00026740 	call	2674 <alt_putstr>
void setSize(int x, int y);


int main()
{
	int x_pos = 0, y_pos = 0;
    2284:	0023883a 	mov	r17,zero
    2288:	0021883a 	mov	r16,zero
  /* Event loop never exits. */
  while (1)
  {
	  int curr_width, curr_height;

  	  waitWithLed(1, 100); // wait 0.2s
    228c:	01401904 	movi	r5,100
    2290:	01000044 	movi	r4,1
    2294:	000205c0 	call	205c <waitWithLed>
	return;
}

void setStartPosition(int x, int y)
{
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_XOFFSET , x);
    2298:	94000035 	stwio	r16,0(r18)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_YOFFSET , y);
    229c:	9c400035 	stwio	r17,0(r19)
  {
	  int curr_width, curr_height;

  	  waitWithLed(1, 100); // wait 0.2s
  	  setStartPosition(x_pos, y_pos);
  	  curr_width = width + (x_pos * 5);
    22a0:	01400144 	movi	r5,5
    22a4:	8009883a 	mov	r4,r16
    22a8:	00023880 	call	2388 <__mulsi3>
  	  curr_height = height + (x_pos * 3);
    22ac:	8407883a 	add	r3,r16,r16
    22b0:	1c07883a 	add	r3,r3,r16
  {
	  int curr_width, curr_height;

  	  waitWithLed(1, 100); // wait 0.2s
  	  setStartPosition(x_pos, y_pos);
  	  curr_width = width + (x_pos * 5);
    22b4:	11c01904 	addi	r7,r2,100
  	  curr_height = height + (x_pos * 3);
    22b8:	18c01904 	addi	r3,r3,100
	return;
}

void setSize(int x, int y)
{
	IOWR(MAIN_SCALER_BASE, REG_SCAL_WIDTH , x);
    22bc:	a1c00035 	stwio	r7,0(r20)
	IOWR(MAIN_SCALER_BASE, REG_SCAL_HEIGHT , y);
    22c0:	00940404 	movi	r2,20496
    22c4:	10c00035 	stwio	r3,0(r2)
  	  setStartPosition(x_pos, y_pos);
  	  curr_width = width + (x_pos * 5);
  	  curr_height = height + (x_pos * 3);
  	  setSize(curr_width, curr_height);

  	  alt_printf("pos=(%x,%x), size=(%x,%x)\n\r", x_pos, y_pos, curr_width, curr_height);
    22c8:	01000034 	movhi	r4,0
    22cc:	d8c00015 	stw	r3,0(sp)
    22d0:	880d883a 	mov	r6,r17
    22d4:	800b883a 	mov	r5,r16
    22d8:	210aba04 	addi	r4,r4,10984
    22dc:	00024bc0 	call	24bc <alt_printf>
  	  printStatus();
    22e0:	00020f80 	call	20f8 <printStatus>

  	  if (x_pos >= max_pos || y_pos >= max_pos)
    22e4:	00800c44 	movi	r2,49
    22e8:	05c00804 	movi	r23,32
    22ec:	05800904 	movi	r22,36
    22f0:	05540304 	movi	r21,20492
    22f4:	14000116 	blt	r2,r16,22fc <main+0x1b8>
    22f8:	1440200e 	bge	r2,r17,237c <main+0x238>
	return;
}

void setStartPosition(int x, int y)
{
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_XOFFSET , x);
    22fc:	b8000035 	stwio	zero,0(r23)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_YOFFSET , y);
    2300:	b0000035 	stwio	zero,0(r22)
	return;
}

void setSize(int x, int y)
{
	IOWR(MAIN_SCALER_BASE, REG_SCAL_WIDTH , x);
    2304:	00805004 	movi	r2,320
    2308:	a8800035 	stwio	r2,0(r21)
	IOWR(MAIN_SCALER_BASE, REG_SCAL_HEIGHT , y);
    230c:	04407004 	movi	r17,448
    2310:	04140404 	movi	r16,20496
    2314:	84400035 	stwio	r17,0(r16)
  		setStartPosition(x_pos, y_pos);
  		// test pixpad size
  		curr_width = 320;
		curr_height = 448;
		setSize(curr_width, curr_height);
  		waitWithLed(5, 1000);
    2318:	0140fa04 	movi	r5,1000
    231c:	01000144 	movi	r4,5
    2320:	000205c0 	call	205c <waitWithLed>
	return;
}

void setStartPosition(int x, int y)
{
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_XOFFSET , x);
    2324:	00803e84 	movi	r2,250
    2328:	b8800035 	stwio	r2,0(r23)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_YOFFSET , y);
    232c:	00800504 	movi	r2,20
    2330:	b0800035 	stwio	r2,0(r22)
  		curr_width = 320;
		curr_height = 448;
		setSize(curr_width, curr_height);
  		waitWithLed(5, 1000);
  		setStartPosition(250, 20);
  		waitWithLed(5, 1000);
    2334:	0140fa04 	movi	r5,1000
    2338:	01000144 	movi	r4,5
    233c:	000205c0 	call	205c <waitWithLed>
	return;
}

void setStartPosition(int x, int y)
{
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_XOFFSET , x);
    2340:	b8000035 	stwio	zero,0(r23)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_YOFFSET , y);
    2344:	b0000035 	stwio	zero,0(r22)
	return;
}

void setSize(int x, int y)
{
	IOWR(MAIN_SCALER_BASE, REG_SCAL_WIDTH , x);
    2348:	05809604 	movi	r22,600
    234c:	ad800035 	stwio	r22,0(r21)
	IOWR(MAIN_SCALER_BASE, REG_SCAL_HEIGHT , y);
    2350:	008067c4 	movi	r2,415
    2354:	80800035 	stwio	r2,0(r16)
  		// test triptiek nPixels
  		setStartPosition(x_pos, y_pos);
  		curr_width = 600;
		curr_height = 415;
		setSize(curr_width, curr_height);
		waitWithLed(5, 1000);
    2358:	0140fa04 	movi	r5,1000
    235c:	01000144 	movi	r4,5
    2360:	000205c0 	call	205c <waitWithLed>
	return;
}

void setSize(int x, int y)
{
	IOWR(MAIN_SCALER_BASE, REG_SCAL_WIDTH , x);
    2364:	ad800035 	stwio	r22,0(r21)
	IOWR(MAIN_SCALER_BASE, REG_SCAL_HEIGHT , y);
    2368:	84400035 	stwio	r17,0(r16)
		waitWithLed(5, 1000);
		// test pixpad keep aspect
		curr_width = 600;
		curr_height = 448;
		setSize(curr_width, curr_height);
		waitWithLed(5, 1000);
    236c:	0140fa04 	movi	r5,1000
    2370:	01000144 	movi	r4,5
    2374:	000205c0 	call	205c <waitWithLed>
    2378:	003fc206 	br	2284 <_gp+0xffff7780>
  	  }
  	  else
  	  {
  		  x_pos++;
    237c:	84000044 	addi	r16,r16,1
  		  y_pos++;
    2380:	8c400044 	addi	r17,r17,1
    2384:	003fc106 	br	228c <_gp+0xffff7788>

00002388 <__mulsi3>:
    2388:	0005883a 	mov	r2,zero
    238c:	20000726 	beq	r4,zero,23ac <__mulsi3+0x24>
    2390:	20c0004c 	andi	r3,r4,1
    2394:	2008d07a 	srli	r4,r4,1
    2398:	18000126 	beq	r3,zero,23a0 <__mulsi3+0x18>
    239c:	1145883a 	add	r2,r2,r5
    23a0:	294b883a 	add	r5,r5,r5
    23a4:	203ffa1e 	bne	r4,zero,2390 <_gp+0xffff788c>
    23a8:	f800283a 	ret
    23ac:	f800283a 	ret

000023b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    23b0:	deffff04 	addi	sp,sp,-4
    23b4:	01000034 	movhi	r4,0
    23b8:	01400034 	movhi	r5,0
    23bc:	dfc00015 	stw	ra,0(sp)
    23c0:	210ac104 	addi	r4,r4,11012
    23c4:	294ac304 	addi	r5,r5,11020

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    23c8:	2140061e 	bne	r4,r5,23e4 <alt_load+0x34>
    23cc:	01000034 	movhi	r4,0
    23d0:	01400034 	movhi	r5,0
    23d4:	21080804 	addi	r4,r4,8224
    23d8:	29480804 	addi	r5,r5,8224
    23dc:	2140121e 	bne	r4,r5,2428 <alt_load+0x78>
    23e0:	00000b06 	br	2410 <alt_load+0x60>
    23e4:	00c00034 	movhi	r3,0
    23e8:	18cac304 	addi	r3,r3,11020
    23ec:	1907c83a 	sub	r3,r3,r4
    23f0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    23f4:	10fff526 	beq	r2,r3,23cc <_gp+0xffff78c8>
    {
      *to++ = *from++;
    23f8:	114f883a 	add	r7,r2,r5
    23fc:	39c00017 	ldw	r7,0(r7)
    2400:	110d883a 	add	r6,r2,r4
    2404:	10800104 	addi	r2,r2,4
    2408:	31c00015 	stw	r7,0(r6)
    240c:	003ff906 	br	23f4 <_gp+0xffff78f0>
    2410:	01000034 	movhi	r4,0
    2414:	01400034 	movhi	r5,0
    2418:	210a7004 	addi	r4,r4,10688
    241c:	294a7004 	addi	r5,r5,10688

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2420:	2140101e 	bne	r4,r5,2464 <alt_load+0xb4>
    2424:	00000b06 	br	2454 <alt_load+0xa4>
    2428:	00c00034 	movhi	r3,0
    242c:	18c80804 	addi	r3,r3,8224
    2430:	1907c83a 	sub	r3,r3,r4
    2434:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2438:	10fff526 	beq	r2,r3,2410 <_gp+0xffff790c>
    {
      *to++ = *from++;
    243c:	114f883a 	add	r7,r2,r5
    2440:	39c00017 	ldw	r7,0(r7)
    2444:	110d883a 	add	r6,r2,r4
    2448:	10800104 	addi	r2,r2,4
    244c:	31c00015 	stw	r7,0(r6)
    2450:	003ff906 	br	2438 <_gp+0xffff7934>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2454:	00027e00 	call	27e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    2458:	dfc00017 	ldw	ra,0(sp)
    245c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    2460:	00027e41 	jmpi	27e4 <alt_icache_flush_all>
    2464:	00c00034 	movhi	r3,0
    2468:	18cac104 	addi	r3,r3,11012
    246c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    2470:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2474:	18bff726 	beq	r3,r2,2454 <_gp+0xffff7950>
    {
      *to++ = *from++;
    2478:	114f883a 	add	r7,r2,r5
    247c:	39c00017 	ldw	r7,0(r7)
    2480:	110d883a 	add	r6,r2,r4
    2484:	10800104 	addi	r2,r2,4
    2488:	31c00015 	stw	r7,0(r6)
    248c:	003ff906 	br	2474 <_gp+0xffff7970>

00002490 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2490:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2494:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2498:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    249c:	00026b00 	call	26b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    24a0:	00026d00 	call	26d0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    24a4:	d1a00417 	ldw	r6,-32752(gp)
    24a8:	d1600517 	ldw	r5,-32748(gp)
    24ac:	d1200617 	ldw	r4,-32744(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    24b0:	dfc00017 	ldw	ra,0(sp)
    24b4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    24b8:	00021441 	jmpi	2144 <main>

000024bc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    24bc:	defff204 	addi	sp,sp,-56
    24c0:	2005883a 	mov	r2,r4
    24c4:	dfc00a15 	stw	ra,40(sp)
    24c8:	df000915 	stw	fp,36(sp)
    24cc:	ddc00815 	stw	r23,32(sp)
    24d0:	dd800715 	stw	r22,28(sp)
    24d4:	dd400615 	stw	r21,24(sp)
    24d8:	dd000515 	stw	r20,20(sp)
    24dc:	dcc00415 	stw	r19,16(sp)
    24e0:	dc800315 	stw	r18,12(sp)
    24e4:	dc400215 	stw	r17,8(sp)
    24e8:	dc000115 	stw	r16,4(sp)
    24ec:	d9400b15 	stw	r5,44(sp)
    24f0:	d9800c15 	stw	r6,48(sp)
    24f4:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    24f8:	04000944 	movi	r16,37
 */
void 
alt_printf(const char* fmt, ... )
{
	va_list args;
	va_start(args, fmt);
    24fc:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
    2500:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
    2504:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    2508:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    250c:	11000007 	ldb	r4,0(r2)
    2510:	20003a26 	beq	r4,zero,25fc <alt_printf+0x140>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    2514:	24000226 	beq	r4,r16,2520 <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    2518:	14400044 	addi	r17,r2,1
    251c:	00001406 	br	2570 <alt_printf+0xb4>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    2520:	14400084 	addi	r17,r2,2
    2524:	10800047 	ldb	r2,1(r2)
    2528:	10003426 	beq	r2,zero,25fc <alt_printf+0x140>
            {
                if (c == '%')
    252c:	1400021e 	bne	r2,r16,2538 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    2530:	8009883a 	mov	r4,r16
    2534:	00000e06 	br	2570 <alt_printf+0xb4>
                } 
                else if (c == 'c')
    2538:	1480051e 	bne	r2,r18,2550 <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
    253c:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    2540:	ad800104 	addi	r22,r21,4
    2544:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
    2548:	000262c0 	call	262c <alt_putchar>
    254c:	00002906 	br	25f4 <alt_printf+0x138>
                }
                else if (c == 'x')
    2550:	14c0201e 	bne	r2,r19,25d4 <alt_printf+0x118>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    2554:	adc00017 	ldw	r23,0(r21)
    2558:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    255c:	b8000326 	beq	r23,zero,256c <alt_printf+0xb0>
    2560:	05800704 	movi	r22,28
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    2564:	00c003c4 	movi	r3,15
    2568:	00000306 	br	2578 <alt_printf+0xbc>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
    256c:	01000c04 	movi	r4,48
    2570:	000262c0 	call	262c <alt_putchar>
                        continue;
    2574:	00001f06 	br	25f4 <alt_printf+0x138>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    2578:	1d84983a 	sll	r2,r3,r22
    257c:	15c4703a 	and	r2,r2,r23
    2580:	1000021e 	bne	r2,zero,258c <alt_printf+0xd0>
                        digit_shift -= 4;
    2584:	b5bfff04 	addi	r22,r22,-4
    2588:	003ffb06 	br	2578 <_gp+0xffff7a74>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    258c:	070003c4 	movi	fp,15
                        if (digit <= 9)
    2590:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    2594:	b0001716 	blt	r22,zero,25f4 <alt_printf+0x138>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    2598:	e588983a 	sll	r4,fp,r22
    259c:	25c8703a 	and	r4,r4,r23
    25a0:	2588d83a 	srl	r4,r4,r22
                        if (digit <= 9)
    25a4:	19000236 	bltu	r3,r4,25b0 <alt_printf+0xf4>
                            c = '0' + digit;
    25a8:	21000c04 	addi	r4,r4,48
    25ac:	00000106 	br	25b4 <alt_printf+0xf8>
                        else
                            c = 'a' + digit - 10;
    25b0:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
    25b4:	21003fcc 	andi	r4,r4,255
    25b8:	2100201c 	xori	r4,r4,128
    25bc:	213fe004 	addi	r4,r4,-128
    25c0:	d8c00015 	stw	r3,0(sp)
    25c4:	000262c0 	call	262c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    25c8:	b5bfff04 	addi	r22,r22,-4
    25cc:	d8c00017 	ldw	r3,0(sp)
    25d0:	003ff006 	br	2594 <_gp+0xffff7a90>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    25d4:	1500071e 	bne	r2,r20,25f4 <alt_printf+0x138>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    25d8:	ad800017 	ldw	r22,0(r21)
    25dc:	ad400104 	addi	r21,r21,4

                    while(*s)
    25e0:	b1000007 	ldb	r4,0(r22)
    25e4:	20000326 	beq	r4,zero,25f4 <alt_printf+0x138>
                      alt_putchar(*s++);
    25e8:	b5800044 	addi	r22,r22,1
    25ec:	000262c0 	call	262c <alt_putchar>
    25f0:	003ffb06 	br	25e0 <_gp+0xffff7adc>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
    25f4:	8805883a 	mov	r2,r17
    25f8:	003fc406 	br	250c <_gp+0xffff7a08>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    25fc:	dfc00a17 	ldw	ra,40(sp)
    2600:	df000917 	ldw	fp,36(sp)
    2604:	ddc00817 	ldw	r23,32(sp)
    2608:	dd800717 	ldw	r22,28(sp)
    260c:	dd400617 	ldw	r21,24(sp)
    2610:	dd000517 	ldw	r20,20(sp)
    2614:	dcc00417 	ldw	r19,16(sp)
    2618:	dc800317 	ldw	r18,12(sp)
    261c:	dc400217 	ldw	r17,8(sp)
    2620:	dc000117 	ldw	r16,4(sp)
    2624:	dec00e04 	addi	sp,sp,56
    2628:	f800283a 	ret

0000262c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    262c:	defffd04 	addi	sp,sp,-12
    2630:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    2634:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2638:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    263c:	01000034 	movhi	r4,0
    2640:	000f883a 	mov	r7,zero
    2644:	01800044 	movi	r6,1
    2648:	d80b883a 	mov	r5,sp
    264c:	210ac104 	addi	r4,r4,11012
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    2650:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    2654:	00026d40 	call	26d4 <altera_avalon_uart_write>
    2658:	00ffffc4 	movi	r3,-1
    265c:	10c00126 	beq	r2,r3,2664 <alt_putchar+0x38>
        return -1;
    }
    return c;
    2660:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
    2664:	dfc00217 	ldw	ra,8(sp)
    2668:	dc000117 	ldw	r16,4(sp)
    266c:	dec00304 	addi	sp,sp,12
    2670:	f800283a 	ret

00002674 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    2674:	defffe04 	addi	sp,sp,-8
    2678:	dc000015 	stw	r16,0(sp)
    267c:	dfc00115 	stw	ra,4(sp)
    2680:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2684:	00027f00 	call	27f0 <strlen>
    2688:	01000034 	movhi	r4,0
    268c:	000f883a 	mov	r7,zero
    2690:	100d883a 	mov	r6,r2
    2694:	800b883a 	mov	r5,r16
    2698:	210ac104 	addi	r4,r4,11012
#else
    return fputs(str, stdout);
#endif
#endif
}
    269c:	dfc00117 	ldw	ra,4(sp)
    26a0:	dc000017 	ldw	r16,0(sp)
    26a4:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    26a8:	00026d41 	jmpi	26d4 <altera_avalon_uart_write>

000026ac <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    26ac:	00027581 	jmpi	2758 <alt_busy_sleep>

000026b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    26b0:	deffff04 	addi	sp,sp,-4
    26b4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    26b8:	00027e80 	call	27e8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    26bc:	00800044 	movi	r2,1
    26c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    26c4:	dfc00017 	ldw	ra,0(sp)
    26c8:	dec00104 	addi	sp,sp,4
    26cc:	f800283a 	ret

000026d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    26d0:	f800283a 	ret

000026d4 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    26d4:	defffd04 	addi	sp,sp,-12
    26d8:	dc400115 	stw	r17,4(sp)
    26dc:	dc000015 	stw	r16,0(sp)
    26e0:	dfc00215 	stw	ra,8(sp)
    26e4:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    26e8:	39d0000c 	andi	r7,r7,16384
  count = len;
    26ec:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    26f0:	20c00017 	ldw	r3,0(r4)
    26f4:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    26f8:	1080100c 	andi	r2,r2,64
    26fc:	10000526 	beq	r2,zero,2714 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    2700:	28800044 	addi	r2,r5,1
    2704:	29400007 	ldb	r5,0(r5)
    2708:	19400135 	stwio	r5,4(r3)
      count--;
    270c:	843fffc4 	addi	r16,r16,-1
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    2710:	100b883a 	mov	r5,r2
      count--;
    }
  }
  while (block && count);
    2714:	3800021e 	bne	r7,zero,2720 <altera_avalon_uart_write+0x4c>
    2718:	803ff51e 	bne	r16,zero,26f0 <_gp+0xffff7bec>
    271c:	00000806 	br	2740 <altera_avalon_uart_write+0x6c>

  if (count)
    2720:	80000726 	beq	r16,zero,2740 <altera_avalon_uart_write+0x6c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    2724:	d0a00117 	ldw	r2,-32764(gp)
    2728:	10000226 	beq	r2,zero,2734 <altera_avalon_uart_write+0x60>
    272c:	103ee83a 	callr	r2
    2730:	00000106 	br	2738 <altera_avalon_uart_write+0x64>
    2734:	d0a00704 	addi	r2,gp,-32740
  {
    ALT_ERRNO = EWOULDBLOCK;
    2738:	00c002c4 	movi	r3,11
    273c:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
}
    2740:	8c05c83a 	sub	r2,r17,r16
    2744:	dfc00217 	ldw	ra,8(sp)
    2748:	dc400117 	ldw	r17,4(sp)
    274c:	dc000017 	ldw	r16,0(sp)
    2750:	dec00304 	addi	sp,sp,12
    2754:	f800283a 	ret

00002758 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    2758:	01427674 	movhi	r5,2521
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    275c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    2760:	29676244 	addi	r5,r5,-25207
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    2764:	dc000015 	stw	r16,0(sp)
    2768:	dfc00115 	stw	ra,4(sp)
    276c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    2770:	00029040 	call	2904 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    2774:	10001026 	beq	r2,zero,27b8 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2778:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    277c:	013d89f4 	movhi	r4,63015
    2780:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2784:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2788:	21189dc4 	addi	r4,r4,25207
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    278c:	297fffc4 	addi	r5,r5,-1
    2790:	283ffe1e 	bne	r5,zero,278c <_gp+0xffff7c88>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    2794:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2798:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    279c:	18bffb16 	blt	r3,r2,278c <_gp+0xffff7c88>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    27a0:	01400344 	movi	r5,13
    27a4:	8009883a 	mov	r4,r16
    27a8:	00023880 	call	2388 <__mulsi3>
    27ac:	10bfffc4 	addi	r2,r2,-1
    27b0:	103ffe1e 	bne	r2,zero,27ac <_gp+0xffff7ca8>
    27b4:	00000506 	br	27cc <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    27b8:	01400344 	movi	r5,13
    27bc:	8009883a 	mov	r4,r16
    27c0:	00023880 	call	2388 <__mulsi3>
    27c4:	10bfffc4 	addi	r2,r2,-1
    27c8:	00bffe16 	blt	zero,r2,27c4 <_gp+0xffff7cc0>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    27cc:	0005883a 	mov	r2,zero
    27d0:	dfc00117 	ldw	ra,4(sp)
    27d4:	dc000017 	ldw	r16,0(sp)
    27d8:	dec00204 	addi	sp,sp,8
    27dc:	f800283a 	ret

000027e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    27e0:	f800283a 	ret

000027e4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    27e4:	f800283a 	ret

000027e8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    27e8:	000170fa 	wrctl	ienable,zero
    27ec:	f800283a 	ret

000027f0 <strlen>:
    27f0:	2005883a 	mov	r2,r4
    27f4:	10c00007 	ldb	r3,0(r2)
    27f8:	18000226 	beq	r3,zero,2804 <strlen+0x14>
    27fc:	10800044 	addi	r2,r2,1
    2800:	003ffc06 	br	27f4 <_gp+0xffff7cf0>
    2804:	1105c83a 	sub	r2,r2,r4
    2808:	f800283a 	ret

0000280c <__divsi3>:
    280c:	20001b16 	blt	r4,zero,287c <__divsi3+0x70>
    2810:	000f883a 	mov	r7,zero
    2814:	28001616 	blt	r5,zero,2870 <__divsi3+0x64>
    2818:	200d883a 	mov	r6,r4
    281c:	29001a2e 	bgeu	r5,r4,2888 <__divsi3+0x7c>
    2820:	00800804 	movi	r2,32
    2824:	00c00044 	movi	r3,1
    2828:	00000106 	br	2830 <__divsi3+0x24>
    282c:	10000d26 	beq	r2,zero,2864 <__divsi3+0x58>
    2830:	294b883a 	add	r5,r5,r5
    2834:	10bfffc4 	addi	r2,r2,-1
    2838:	18c7883a 	add	r3,r3,r3
    283c:	293ffb36 	bltu	r5,r4,282c <_gp+0xffff7d28>
    2840:	0005883a 	mov	r2,zero
    2844:	18000726 	beq	r3,zero,2864 <__divsi3+0x58>
    2848:	0005883a 	mov	r2,zero
    284c:	31400236 	bltu	r6,r5,2858 <__divsi3+0x4c>
    2850:	314dc83a 	sub	r6,r6,r5
    2854:	10c4b03a 	or	r2,r2,r3
    2858:	1806d07a 	srli	r3,r3,1
    285c:	280ad07a 	srli	r5,r5,1
    2860:	183ffa1e 	bne	r3,zero,284c <_gp+0xffff7d48>
    2864:	38000126 	beq	r7,zero,286c <__divsi3+0x60>
    2868:	0085c83a 	sub	r2,zero,r2
    286c:	f800283a 	ret
    2870:	014bc83a 	sub	r5,zero,r5
    2874:	39c0005c 	xori	r7,r7,1
    2878:	003fe706 	br	2818 <_gp+0xffff7d14>
    287c:	0109c83a 	sub	r4,zero,r4
    2880:	01c00044 	movi	r7,1
    2884:	003fe306 	br	2814 <_gp+0xffff7d10>
    2888:	00c00044 	movi	r3,1
    288c:	003fee06 	br	2848 <_gp+0xffff7d44>

00002890 <__modsi3>:
    2890:	20001716 	blt	r4,zero,28f0 <__modsi3+0x60>
    2894:	000f883a 	mov	r7,zero
    2898:	2005883a 	mov	r2,r4
    289c:	28001216 	blt	r5,zero,28e8 <__modsi3+0x58>
    28a0:	2900162e 	bgeu	r5,r4,28fc <__modsi3+0x6c>
    28a4:	01800804 	movi	r6,32
    28a8:	00c00044 	movi	r3,1
    28ac:	00000106 	br	28b4 <__modsi3+0x24>
    28b0:	30000a26 	beq	r6,zero,28dc <__modsi3+0x4c>
    28b4:	294b883a 	add	r5,r5,r5
    28b8:	31bfffc4 	addi	r6,r6,-1
    28bc:	18c7883a 	add	r3,r3,r3
    28c0:	293ffb36 	bltu	r5,r4,28b0 <_gp+0xffff7dac>
    28c4:	18000526 	beq	r3,zero,28dc <__modsi3+0x4c>
    28c8:	1806d07a 	srli	r3,r3,1
    28cc:	11400136 	bltu	r2,r5,28d4 <__modsi3+0x44>
    28d0:	1145c83a 	sub	r2,r2,r5
    28d4:	280ad07a 	srli	r5,r5,1
    28d8:	183ffb1e 	bne	r3,zero,28c8 <_gp+0xffff7dc4>
    28dc:	38000126 	beq	r7,zero,28e4 <__modsi3+0x54>
    28e0:	0085c83a 	sub	r2,zero,r2
    28e4:	f800283a 	ret
    28e8:	014bc83a 	sub	r5,zero,r5
    28ec:	003fec06 	br	28a0 <_gp+0xffff7d9c>
    28f0:	0109c83a 	sub	r4,zero,r4
    28f4:	01c00044 	movi	r7,1
    28f8:	003fe706 	br	2898 <_gp+0xffff7d94>
    28fc:	00c00044 	movi	r3,1
    2900:	003ff106 	br	28c8 <_gp+0xffff7dc4>

00002904 <__udivsi3>:
    2904:	200d883a 	mov	r6,r4
    2908:	2900152e 	bgeu	r5,r4,2960 <__udivsi3+0x5c>
    290c:	28001416 	blt	r5,zero,2960 <__udivsi3+0x5c>
    2910:	00800804 	movi	r2,32
    2914:	00c00044 	movi	r3,1
    2918:	00000206 	br	2924 <__udivsi3+0x20>
    291c:	10000e26 	beq	r2,zero,2958 <__udivsi3+0x54>
    2920:	28000516 	blt	r5,zero,2938 <__udivsi3+0x34>
    2924:	294b883a 	add	r5,r5,r5
    2928:	10bfffc4 	addi	r2,r2,-1
    292c:	18c7883a 	add	r3,r3,r3
    2930:	293ffa36 	bltu	r5,r4,291c <_gp+0xffff7e18>
    2934:	18000826 	beq	r3,zero,2958 <__udivsi3+0x54>
    2938:	0005883a 	mov	r2,zero
    293c:	31400236 	bltu	r6,r5,2948 <__udivsi3+0x44>
    2940:	314dc83a 	sub	r6,r6,r5
    2944:	10c4b03a 	or	r2,r2,r3
    2948:	1806d07a 	srli	r3,r3,1
    294c:	280ad07a 	srli	r5,r5,1
    2950:	183ffa1e 	bne	r3,zero,293c <_gp+0xffff7e38>
    2954:	f800283a 	ret
    2958:	0005883a 	mov	r2,zero
    295c:	f800283a 	ret
    2960:	00c00044 	movi	r3,1
    2964:	003ff406 	br	2938 <_gp+0xffff7e34>

00002968 <__umodsi3>:
    2968:	2005883a 	mov	r2,r4
    296c:	2900122e 	bgeu	r5,r4,29b8 <__umodsi3+0x50>
    2970:	28001116 	blt	r5,zero,29b8 <__umodsi3+0x50>
    2974:	01800804 	movi	r6,32
    2978:	00c00044 	movi	r3,1
    297c:	00000206 	br	2988 <__umodsi3+0x20>
    2980:	30000c26 	beq	r6,zero,29b4 <__umodsi3+0x4c>
    2984:	28000516 	blt	r5,zero,299c <__umodsi3+0x34>
    2988:	294b883a 	add	r5,r5,r5
    298c:	31bfffc4 	addi	r6,r6,-1
    2990:	18c7883a 	add	r3,r3,r3
    2994:	293ffa36 	bltu	r5,r4,2980 <_gp+0xffff7e7c>
    2998:	18000626 	beq	r3,zero,29b4 <__umodsi3+0x4c>
    299c:	1806d07a 	srli	r3,r3,1
    29a0:	11400136 	bltu	r2,r5,29a8 <__umodsi3+0x40>
    29a4:	1145c83a 	sub	r2,r2,r5
    29a8:	280ad07a 	srli	r5,r5,1
    29ac:	183ffb1e 	bne	r3,zero,299c <_gp+0xffff7e98>
    29b0:	f800283a 	ret
    29b4:	f800283a 	ret
    29b8:	00c00044 	movi	r3,1
    29bc:	003ff706 	br	299c <_gp+0xffff7e98>
