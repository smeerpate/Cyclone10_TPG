
hallo1.elf:     file format elf32-littlenios2
hallo1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000718 memsz 0x00000718 flags r-x
    LOAD off    0x00001738 vaddr 0x00002738 paddr 0x00002740 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x00001748 vaddr 0x00002748 paddr 0x00002748 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00002020  00002020  00001740  2**0
                  CONTENTS
  2 .text         0000066c  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000ac  0000268c  0000268c  0000168c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000008  00002738  00002740  00001738  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00002748  00002748  00001748  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00002758  00002758  00001740  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000220  00000000  00000000  00001768  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000013d3  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000a3b  00000000  00000000  00002d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000b7b  00000000  00000000  00003796  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002ac  00000000  00000000  00004314  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000912  00000000  00000000  000045c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000008a1  00000000  00000000  00004ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00005774  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  000057b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000067fa  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000067fd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00006809  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000680a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000006  00000000  00000000  0000680b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000006  00000000  00000000  00006811  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000006  00000000  00000000  00006817  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0000681d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000037  00000000  00000000  00006825  2**0
                  CONTENTS, READONLY
 26 .jdi          00005353  00000000  00000000  0000685c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00055c29  00000000  00000000  0000bbaf  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .exceptions	00000000 .exceptions
00002020 l    d  .text	00000000 .text
0000268c l    d  .rodata	00000000 .rodata
00002738 l    d  .rwdata	00000000 .rwdata
00002748 l    d  .bss	00000000 .bss
00002758 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hallo1_bsp//obj/HAL/src/crt0.o
00002058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00002314 g     F .text	0000002c alt_main
00002740 g       *ABS*	00000000 __flash_rwdata_start
00002340 g     F .text	00000038 alt_putstr
000024b4 g     F .text	00000008 altera_nios2_gen2_irq_init
00002000 g     F .entry	0000000c __reset
00002020 g       *ABS*	00000000 __flash_exceptions_start
00002754 g     O .bss	00000004 errno
0000274c g     O .bss	00000004 alt_argv
0000a738 g       *ABS*	00000000 _gp
00002378 g     F .text	00000004 usleep
00002000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000025d0 g     F .text	00000064 .hidden __udivsi3
00002758 g       *ABS*	00000000 __bss_end
0000205c g     F .text	00000088 waitWithLed
000024ac g     F .text	00000004 alt_dcache_flush_all
00002740 g       *ABS*	00000000 __ram_rwdata_end
00002738 g       *ABS*	00000000 __ram_rodata_end
00002634 g     F .text	00000058 .hidden __umodsi3
00002758 g       *ABS*	00000000 end
000023a0 g     F .text	00000084 altera_avalon_uart_write
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002020 g     F .text	0000003c _start
0000239c g     F .text	00000004 alt_sys_init
0000220c g     F .text	00000028 .hidden __mulsi3
00002738 g       *ABS*	00000000 __ram_rwdata_start
0000268c g       *ABS*	00000000 __ram_rodata_start
00002424 g     F .text	00000088 alt_busy_sleep
000020e4 g     F .text	00000014 setStartPosition
00002758 g       *ABS*	00000000 __alt_stack_base
00002748 g       *ABS*	00000000 __bss_start
000020f8 g     F .text	00000114 main
00002748 g     O .bss	00000004 alt_envp
00002738 g     O .rwdata	00000004 uart_0
0000273c g     O .rwdata	00000004 alt_errno
000024d8 g     F .text	00000084 .hidden __divsi3
0000268c g       *ABS*	00000000 __flash_rodata_start
0000237c g     F .text	00000020 alt_irq_init
00002750 g     O .bss	00000004 alt_argc
00002020 g       *ABS*	00000000 __ram_exceptions_start
00002740 g       *ABS*	00000000 _edata
00002758 g       *ABS*	00000000 _end
00002020 g       *ABS*	00000000 __ram_exceptions_end
0000255c g     F .text	00000074 .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit
000024bc g     F .text	0000001c strlen
000024b0 g     F .text	00000004 alt_icache_flush_all
00002234 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a9ce14 	ori	gp,gp,42808
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	1089d214 	ori	r2,r2,10056

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c9d614 	ori	r3,r3,10072

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_gp+0xffff790c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    2050:	00022340 	call	2234 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2054:	00023140 	call	2314 <alt_main>

00002058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2058:	003fff06 	br	2058 <_gp+0xffff7920>

0000205c <waitWithLed>:

  return 0;
}

void waitWithLed(int ticks, int tickTimeMs)
{
    205c:	defffa04 	addi	sp,sp,-24
    2060:	dcc00315 	stw	r19,12(sp)
    2064:	2027883a 	mov	r19,r4
	for (int i = 0; i < ticks; i++)
		{
		  IOWR(PIO_0_BASE, 0x00, 0x3);
		  usleep(tickTimeMs/2 * 1000);
    2068:	2808d7fa 	srli	r4,r5,31

  return 0;
}

void waitWithLed(int ticks, int tickTimeMs)
{
    206c:	dd000415 	stw	r20,16(sp)
    2070:	dc800215 	stw	r18,8(sp)
	for (int i = 0; i < ticks; i++)
		{
		  IOWR(PIO_0_BASE, 0x00, 0x3);
		  usleep(tickTimeMs/2 * 1000);
    2074:	2149883a 	add	r4,r4,r5
    2078:	2009d07a 	srai	r4,r4,1
    207c:	0140fa04 	movi	r5,1000

  return 0;
}

void waitWithLed(int ticks, int tickTimeMs)
{
    2080:	dc400115 	stw	r17,4(sp)
    2084:	dc000015 	stw	r16,0(sp)
    2088:	dfc00515 	stw	ra,20(sp)
	for (int i = 0; i < ticks; i++)
		{
		  IOWR(PIO_0_BASE, 0x00, 0x3);
		  usleep(tickTimeMs/2 * 1000);
    208c:	000220c0 	call	220c <__mulsi3>
    2090:	1023883a 	mov	r17,r2
  return 0;
}

void waitWithLed(int ticks, int tickTimeMs)
{
	for (int i = 0; i < ticks; i++)
    2094:	0021883a 	mov	r16,zero
		{
		  IOWR(PIO_0_BASE, 0x00, 0x3);
    2098:	050000c4 	movi	r20,3
    209c:	04900004 	movi	r18,16384
  return 0;
}

void waitWithLed(int ticks, int tickTimeMs)
{
	for (int i = 0; i < ticks; i++)
    20a0:	84c0080e 	bge	r16,r19,20c4 <waitWithLed+0x68>
		{
		  IOWR(PIO_0_BASE, 0x00, 0x3);
    20a4:	95000035 	stwio	r20,0(r18)
		  usleep(tickTimeMs/2 * 1000);
    20a8:	8809883a 	mov	r4,r17
    20ac:	00023780 	call	2378 <usleep>
		  IOWR(PIO_0_BASE, 0x00, 0x0);
    20b0:	90000035 	stwio	zero,0(r18)
		  usleep(tickTimeMs/2 * 1000);
    20b4:	8809883a 	mov	r4,r17
    20b8:	00023780 	call	2378 <usleep>
  return 0;
}

void waitWithLed(int ticks, int tickTimeMs)
{
	for (int i = 0; i < ticks; i++)
    20bc:	84000044 	addi	r16,r16,1
    20c0:	003ff706 	br	20a0 <_gp+0xffff7968>
		  usleep(tickTimeMs/2 * 1000);
		  IOWR(PIO_0_BASE, 0x00, 0x0);
		  usleep(tickTimeMs/2 * 1000);
		}
	return;
}
    20c4:	dfc00517 	ldw	ra,20(sp)
    20c8:	dd000417 	ldw	r20,16(sp)
    20cc:	dcc00317 	ldw	r19,12(sp)
    20d0:	dc800217 	ldw	r18,8(sp)
    20d4:	dc400117 	ldw	r17,4(sp)
    20d8:	dc000017 	ldw	r16,0(sp)
    20dc:	dec00604 	addi	sp,sp,24
    20e0:	f800283a 	ret

000020e4 <setStartPosition>:

void setStartPosition(int x, int y)
{
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_XOFFSET , x);
    20e4:	00800804 	movi	r2,32
    20e8:	11000035 	stwio	r4,0(r2)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_YOFFSET , y);
    20ec:	00800904 	movi	r2,36
    20f0:	11400035 	stwio	r5,0(r2)
    20f4:	f800283a 	ret

000020f8 <main>:
int main()
{
	int x_pos = 0, y_pos = 0;
	int max_pos = 50;

	alt_putstr("\n\rInitializeren van mixer na LED geroffel...");
    20f8:	01000034 	movhi	r4,0

void waitWithLed(int ticks, int tickTimeMs);
void setStartPosition(int x, int y);

int main()
{
    20fc:	defffa04 	addi	sp,sp,-24
	int x_pos = 0, y_pos = 0;
	int max_pos = 50;

	alt_putstr("\n\rInitializeren van mixer na LED geroffel...");
    2100:	2109a304 	addi	r4,r4,9868

void waitWithLed(int ticks, int tickTimeMs);
void setStartPosition(int x, int y);

int main()
{
    2104:	dfc00515 	stw	ra,20(sp)
    2108:	dc400115 	stw	r17,4(sp)
    210c:	dc000015 	stw	r16,0(sp)
    2110:	dd000415 	stw	r20,16(sp)
    2114:	dcc00315 	stw	r19,12(sp)
    2118:	dc800215 	stw	r18,8(sp)
	int x_pos = 0, y_pos = 0;
	int max_pos = 50;

	alt_putstr("\n\rInitializeren van mixer na LED geroffel...");
	waitWithLed(60, 40);
    211c:	04000a04 	movi	r16,40
int main()
{
	int x_pos = 0, y_pos = 0;
	int max_pos = 50;

	alt_putstr("\n\rInitializeren van mixer na LED geroffel...");
    2120:	00023400 	call	2340 <alt_putstr>
	waitWithLed(60, 40);
    2124:	800b883a 	mov	r5,r16
    2128:	01000f04 	movi	r4,60
    212c:	000205c0 	call	205c <waitWithLed>
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_CONTROL, 0x1);
    2130:	04400044 	movi	r17,1
    2134:	0005883a 	mov	r2,zero
    2138:	14400035 	stwio	r17,0(r2)
	alt_putstr("-->Klaar met instellen.\n\r");
    213c:	01000034 	movhi	r4,0
    2140:	2109af04 	addi	r4,r4,9916
    2144:	00023400 	call	2340 <alt_putstr>

	waitWithLed(4, 1000);
    2148:	0140fa04 	movi	r5,1000
    214c:	01000104 	movi	r4,4
    2150:	000205c0 	call	205c <waitWithLed>

	alt_putstr("beginpositie instellen na LED geroffel...");
    2154:	01000034 	movhi	r4,0
    2158:	2109b604 	addi	r4,r4,9944
    215c:	00023400 	call	2340 <alt_putstr>
	waitWithLed(60, 40);
    2160:	800b883a 	mov	r5,r16
    2164:	01000f04 	movi	r4,60
    2168:	000205c0 	call	205c <waitWithLed>
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_XOFFSET , 30);
    216c:	00800784 	movi	r2,30
    2170:	04800804 	movi	r18,32
    2174:	90800035 	stwio	r2,0(r18)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_YOFFSET , 30);
    2178:	04c00904 	movi	r19,36
    217c:	98800035 	stwio	r2,0(r19)
	alt_putstr("-->Klaar met instellen.\n\r");
    2180:	01000034 	movhi	r4,0
    2184:	2109af04 	addi	r4,r4,9916
    2188:	00023400 	call	2340 <alt_putstr>

	waitWithLed(5, 1000);
    218c:	0140fa04 	movi	r5,1000
    2190:	01000144 	movi	r4,5
    2194:	000205c0 	call	205c <waitWithLed>
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_INPUTCONTROL , 0x3);
	alt_putstr("-->Klaar met instellen.\n\r");

	waitWithLed(6, 1000);
*/
	alt_putstr("enable input 0 na LED geroffel...");
    2198:	01000034 	movhi	r4,0
    219c:	2109c104 	addi	r4,r4,9988
    21a0:	00023400 	call	2340 <alt_putstr>
	waitWithLed(60, 40);
    21a4:	800b883a 	mov	r5,r16
    21a8:	01000f04 	movi	r4,60
    21ac:	000205c0 	call	205c <waitWithLed>
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_INPUTCONTROL , 0x1);
    21b0:	84400035 	stwio	r17,0(r16)
	alt_putstr("-->Klaar met instellen.\n\r");
    21b4:	01000034 	movhi	r4,0
    21b8:	2109af04 	addi	r4,r4,9916
    21bc:	00023400 	call	2340 <alt_putstr>

	alt_putstr("Dat was het.\n\r");
    21c0:	01000034 	movhi	r4,0
    21c4:	2109ca04 	addi	r4,r4,10024
    21c8:	00023400 	call	2340 <alt_putstr>
void waitWithLed(int ticks, int tickTimeMs);
void setStartPosition(int x, int y);

int main()
{
	int x_pos = 0, y_pos = 0;
    21cc:	0021883a 	mov	r16,zero
    21d0:	0023883a 	mov	r17,zero
  /* Event loop never exits. */
  while (1)
  {
  	  waitWithLed(1, 250);
  	  setStartPosition(x_pos, y_pos);
  	  if (x_pos >= max_pos || y_pos >= max_pos)
    21d4:	05000c44 	movi	r20,49
	alt_putstr("Dat was het.\n\r");

  /* Event loop never exits. */
  while (1)
  {
  	  waitWithLed(1, 250);
    21d8:	01403e84 	movi	r5,250
    21dc:	01000044 	movi	r4,1
    21e0:	000205c0 	call	205c <waitWithLed>
	return;
}

void setStartPosition(int x, int y)
{
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_XOFFSET , x);
    21e4:	94400035 	stwio	r17,0(r18)
	IOWR(ALT_VIP_CL_MIXER_0_BASE, REG_MIX_IN0_YOFFSET , y);
    21e8:	9c000035 	stwio	r16,0(r19)
  /* Event loop never exits. */
  while (1)
  {
  	  waitWithLed(1, 250);
  	  setStartPosition(x_pos, y_pos);
  	  if (x_pos >= max_pos || y_pos >= max_pos)
    21ec:	a440030e 	bge	r20,r17,21fc <main+0x104>
  	  {
  		x_pos = 0;
  		y_pos = 0;
    21f0:	0021883a 	mov	r16,zero
  {
  	  waitWithLed(1, 250);
  	  setStartPosition(x_pos, y_pos);
  	  if (x_pos >= max_pos || y_pos >= max_pos)
  	  {
  		x_pos = 0;
    21f4:	0023883a 	mov	r17,zero
    21f8:	003ff706 	br	21d8 <_gp+0xffff7aa0>
  /* Event loop never exits. */
  while (1)
  {
  	  waitWithLed(1, 250);
  	  setStartPosition(x_pos, y_pos);
  	  if (x_pos >= max_pos || y_pos >= max_pos)
    21fc:	a43ffc16 	blt	r20,r16,21f0 <_gp+0xffff7ab8>
  		x_pos = 0;
  		y_pos = 0;
  	  }
  	  else
  	  {
  		  x_pos++;
    2200:	8c400044 	addi	r17,r17,1
  		  y_pos++;
    2204:	84000044 	addi	r16,r16,1
    2208:	003ff306 	br	21d8 <_gp+0xffff7aa0>

0000220c <__mulsi3>:
    220c:	0005883a 	mov	r2,zero
    2210:	20000726 	beq	r4,zero,2230 <__mulsi3+0x24>
    2214:	20c0004c 	andi	r3,r4,1
    2218:	2008d07a 	srli	r4,r4,1
    221c:	18000126 	beq	r3,zero,2224 <__mulsi3+0x18>
    2220:	1145883a 	add	r2,r2,r5
    2224:	294b883a 	add	r5,r5,r5
    2228:	203ffa1e 	bne	r4,zero,2214 <_gp+0xffff7adc>
    222c:	f800283a 	ret
    2230:	f800283a 	ret

00002234 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2234:	deffff04 	addi	sp,sp,-4
    2238:	01000034 	movhi	r4,0
    223c:	01400034 	movhi	r5,0
    2240:	dfc00015 	stw	ra,0(sp)
    2244:	2109ce04 	addi	r4,r4,10040
    2248:	2949d004 	addi	r5,r5,10048

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    224c:	2140061e 	bne	r4,r5,2268 <alt_load+0x34>
    2250:	01000034 	movhi	r4,0
    2254:	01400034 	movhi	r5,0
    2258:	21080804 	addi	r4,r4,8224
    225c:	29480804 	addi	r5,r5,8224
    2260:	2140121e 	bne	r4,r5,22ac <alt_load+0x78>
    2264:	00000b06 	br	2294 <alt_load+0x60>
    2268:	00c00034 	movhi	r3,0
    226c:	18c9d004 	addi	r3,r3,10048
    2270:	1907c83a 	sub	r3,r3,r4
    2274:	0005883a 	mov	r2,zero
  {
    while( to != end )
    2278:	10fff526 	beq	r2,r3,2250 <_gp+0xffff7b18>
    {
      *to++ = *from++;
    227c:	114f883a 	add	r7,r2,r5
    2280:	39c00017 	ldw	r7,0(r7)
    2284:	110d883a 	add	r6,r2,r4
    2288:	10800104 	addi	r2,r2,4
    228c:	31c00015 	stw	r7,0(r6)
    2290:	003ff906 	br	2278 <_gp+0xffff7b40>
    2294:	01000034 	movhi	r4,0
    2298:	01400034 	movhi	r5,0
    229c:	2109a304 	addi	r4,r4,9868
    22a0:	2949a304 	addi	r5,r5,9868

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    22a4:	2140101e 	bne	r4,r5,22e8 <alt_load+0xb4>
    22a8:	00000b06 	br	22d8 <alt_load+0xa4>
    22ac:	00c00034 	movhi	r3,0
    22b0:	18c80804 	addi	r3,r3,8224
    22b4:	1907c83a 	sub	r3,r3,r4
    22b8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    22bc:	10fff526 	beq	r2,r3,2294 <_gp+0xffff7b5c>
    {
      *to++ = *from++;
    22c0:	114f883a 	add	r7,r2,r5
    22c4:	39c00017 	ldw	r7,0(r7)
    22c8:	110d883a 	add	r6,r2,r4
    22cc:	10800104 	addi	r2,r2,4
    22d0:	31c00015 	stw	r7,0(r6)
    22d4:	003ff906 	br	22bc <_gp+0xffff7b84>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    22d8:	00024ac0 	call	24ac <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    22dc:	dfc00017 	ldw	ra,0(sp)
    22e0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    22e4:	00024b01 	jmpi	24b0 <alt_icache_flush_all>
    22e8:	00c00034 	movhi	r3,0
    22ec:	18c9ce04 	addi	r3,r3,10040
    22f0:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    22f4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    22f8:	18bff726 	beq	r3,r2,22d8 <_gp+0xffff7ba0>
    {
      *to++ = *from++;
    22fc:	114f883a 	add	r7,r2,r5
    2300:	39c00017 	ldw	r7,0(r7)
    2304:	110d883a 	add	r6,r2,r4
    2308:	10800104 	addi	r2,r2,4
    230c:	31c00015 	stw	r7,0(r6)
    2310:	003ff906 	br	22f8 <_gp+0xffff7bc0>

00002314 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2314:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2318:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    231c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    2320:	000237c0 	call	237c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    2324:	000239c0 	call	239c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    2328:	d1a00417 	ldw	r6,-32752(gp)
    232c:	d1600517 	ldw	r5,-32748(gp)
    2330:	d1200617 	ldw	r4,-32744(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    2334:	dfc00017 	ldw	ra,0(sp)
    2338:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    233c:	00020f81 	jmpi	20f8 <main>

00002340 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    2340:	defffe04 	addi	sp,sp,-8
    2344:	dc000015 	stw	r16,0(sp)
    2348:	dfc00115 	stw	ra,4(sp)
    234c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2350:	00024bc0 	call	24bc <strlen>
    2354:	01000034 	movhi	r4,0
    2358:	000f883a 	mov	r7,zero
    235c:	100d883a 	mov	r6,r2
    2360:	800b883a 	mov	r5,r16
    2364:	2109ce04 	addi	r4,r4,10040
#else
    return fputs(str, stdout);
#endif
#endif
}
    2368:	dfc00117 	ldw	ra,4(sp)
    236c:	dc000017 	ldw	r16,0(sp)
    2370:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    2374:	00023a01 	jmpi	23a0 <altera_avalon_uart_write>

00002378 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    2378:	00024241 	jmpi	2424 <alt_busy_sleep>

0000237c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    237c:	deffff04 	addi	sp,sp,-4
    2380:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    2384:	00024b40 	call	24b4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2388:	00800044 	movi	r2,1
    238c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2390:	dfc00017 	ldw	ra,0(sp)
    2394:	dec00104 	addi	sp,sp,4
    2398:	f800283a 	ret

0000239c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    239c:	f800283a 	ret

000023a0 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    23a0:	defffd04 	addi	sp,sp,-12
    23a4:	dc400115 	stw	r17,4(sp)
    23a8:	dc000015 	stw	r16,0(sp)
    23ac:	dfc00215 	stw	ra,8(sp)
    23b0:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    23b4:	39d0000c 	andi	r7,r7,16384
  count = len;
    23b8:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    23bc:	20c00017 	ldw	r3,0(r4)
    23c0:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    23c4:	1080100c 	andi	r2,r2,64
    23c8:	10000526 	beq	r2,zero,23e0 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    23cc:	28800044 	addi	r2,r5,1
    23d0:	29400007 	ldb	r5,0(r5)
    23d4:	19400135 	stwio	r5,4(r3)
      count--;
    23d8:	843fffc4 	addi	r16,r16,-1
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    23dc:	100b883a 	mov	r5,r2
      count--;
    }
  }
  while (block && count);
    23e0:	3800021e 	bne	r7,zero,23ec <altera_avalon_uart_write+0x4c>
    23e4:	803ff51e 	bne	r16,zero,23bc <_gp+0xffff7c84>
    23e8:	00000806 	br	240c <altera_avalon_uart_write+0x6c>

  if (count)
    23ec:	80000726 	beq	r16,zero,240c <altera_avalon_uart_write+0x6c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    23f0:	d0a00117 	ldw	r2,-32764(gp)
    23f4:	10000226 	beq	r2,zero,2400 <altera_avalon_uart_write+0x60>
    23f8:	103ee83a 	callr	r2
    23fc:	00000106 	br	2404 <altera_avalon_uart_write+0x64>
    2400:	d0a00704 	addi	r2,gp,-32740
  {
    ALT_ERRNO = EWOULDBLOCK;
    2404:	00c002c4 	movi	r3,11
    2408:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
}
    240c:	8c05c83a 	sub	r2,r17,r16
    2410:	dfc00217 	ldw	ra,8(sp)
    2414:	dc400117 	ldw	r17,4(sp)
    2418:	dc000017 	ldw	r16,0(sp)
    241c:	dec00304 	addi	sp,sp,12
    2420:	f800283a 	ret

00002424 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    2424:	01427674 	movhi	r5,2521
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    2428:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    242c:	29676244 	addi	r5,r5,-25207
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    2430:	dc000015 	stw	r16,0(sp)
    2434:	dfc00115 	stw	ra,4(sp)
    2438:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    243c:	00025d00 	call	25d0 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    2440:	10001026 	beq	r2,zero,2484 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2444:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2448:	013d89f4 	movhi	r4,63015
    244c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2450:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2454:	21189dc4 	addi	r4,r4,25207
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    2458:	297fffc4 	addi	r5,r5,-1
    245c:	283ffe1e 	bne	r5,zero,2458 <_gp+0xffff7d20>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    2460:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    2464:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    2468:	18bffb16 	blt	r3,r2,2458 <_gp+0xffff7d20>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    246c:	01400344 	movi	r5,13
    2470:	8009883a 	mov	r4,r16
    2474:	000220c0 	call	220c <__mulsi3>
    2478:	10bfffc4 	addi	r2,r2,-1
    247c:	103ffe1e 	bne	r2,zero,2478 <_gp+0xffff7d40>
    2480:	00000506 	br	2498 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    2484:	01400344 	movi	r5,13
    2488:	8009883a 	mov	r4,r16
    248c:	000220c0 	call	220c <__mulsi3>
    2490:	10bfffc4 	addi	r2,r2,-1
    2494:	00bffe16 	blt	zero,r2,2490 <_gp+0xffff7d58>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    2498:	0005883a 	mov	r2,zero
    249c:	dfc00117 	ldw	ra,4(sp)
    24a0:	dc000017 	ldw	r16,0(sp)
    24a4:	dec00204 	addi	sp,sp,8
    24a8:	f800283a 	ret

000024ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    24ac:	f800283a 	ret

000024b0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    24b0:	f800283a 	ret

000024b4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    24b4:	000170fa 	wrctl	ienable,zero
    24b8:	f800283a 	ret

000024bc <strlen>:
    24bc:	2005883a 	mov	r2,r4
    24c0:	10c00007 	ldb	r3,0(r2)
    24c4:	18000226 	beq	r3,zero,24d0 <strlen+0x14>
    24c8:	10800044 	addi	r2,r2,1
    24cc:	003ffc06 	br	24c0 <_gp+0xffff7d88>
    24d0:	1105c83a 	sub	r2,r2,r4
    24d4:	f800283a 	ret

000024d8 <__divsi3>:
    24d8:	20001b16 	blt	r4,zero,2548 <__divsi3+0x70>
    24dc:	000f883a 	mov	r7,zero
    24e0:	28001616 	blt	r5,zero,253c <__divsi3+0x64>
    24e4:	200d883a 	mov	r6,r4
    24e8:	29001a2e 	bgeu	r5,r4,2554 <__divsi3+0x7c>
    24ec:	00800804 	movi	r2,32
    24f0:	00c00044 	movi	r3,1
    24f4:	00000106 	br	24fc <__divsi3+0x24>
    24f8:	10000d26 	beq	r2,zero,2530 <__divsi3+0x58>
    24fc:	294b883a 	add	r5,r5,r5
    2500:	10bfffc4 	addi	r2,r2,-1
    2504:	18c7883a 	add	r3,r3,r3
    2508:	293ffb36 	bltu	r5,r4,24f8 <_gp+0xffff7dc0>
    250c:	0005883a 	mov	r2,zero
    2510:	18000726 	beq	r3,zero,2530 <__divsi3+0x58>
    2514:	0005883a 	mov	r2,zero
    2518:	31400236 	bltu	r6,r5,2524 <__divsi3+0x4c>
    251c:	314dc83a 	sub	r6,r6,r5
    2520:	10c4b03a 	or	r2,r2,r3
    2524:	1806d07a 	srli	r3,r3,1
    2528:	280ad07a 	srli	r5,r5,1
    252c:	183ffa1e 	bne	r3,zero,2518 <_gp+0xffff7de0>
    2530:	38000126 	beq	r7,zero,2538 <__divsi3+0x60>
    2534:	0085c83a 	sub	r2,zero,r2
    2538:	f800283a 	ret
    253c:	014bc83a 	sub	r5,zero,r5
    2540:	39c0005c 	xori	r7,r7,1
    2544:	003fe706 	br	24e4 <_gp+0xffff7dac>
    2548:	0109c83a 	sub	r4,zero,r4
    254c:	01c00044 	movi	r7,1
    2550:	003fe306 	br	24e0 <_gp+0xffff7da8>
    2554:	00c00044 	movi	r3,1
    2558:	003fee06 	br	2514 <_gp+0xffff7ddc>

0000255c <__modsi3>:
    255c:	20001716 	blt	r4,zero,25bc <__modsi3+0x60>
    2560:	000f883a 	mov	r7,zero
    2564:	2005883a 	mov	r2,r4
    2568:	28001216 	blt	r5,zero,25b4 <__modsi3+0x58>
    256c:	2900162e 	bgeu	r5,r4,25c8 <__modsi3+0x6c>
    2570:	01800804 	movi	r6,32
    2574:	00c00044 	movi	r3,1
    2578:	00000106 	br	2580 <__modsi3+0x24>
    257c:	30000a26 	beq	r6,zero,25a8 <__modsi3+0x4c>
    2580:	294b883a 	add	r5,r5,r5
    2584:	31bfffc4 	addi	r6,r6,-1
    2588:	18c7883a 	add	r3,r3,r3
    258c:	293ffb36 	bltu	r5,r4,257c <_gp+0xffff7e44>
    2590:	18000526 	beq	r3,zero,25a8 <__modsi3+0x4c>
    2594:	1806d07a 	srli	r3,r3,1
    2598:	11400136 	bltu	r2,r5,25a0 <__modsi3+0x44>
    259c:	1145c83a 	sub	r2,r2,r5
    25a0:	280ad07a 	srli	r5,r5,1
    25a4:	183ffb1e 	bne	r3,zero,2594 <_gp+0xffff7e5c>
    25a8:	38000126 	beq	r7,zero,25b0 <__modsi3+0x54>
    25ac:	0085c83a 	sub	r2,zero,r2
    25b0:	f800283a 	ret
    25b4:	014bc83a 	sub	r5,zero,r5
    25b8:	003fec06 	br	256c <_gp+0xffff7e34>
    25bc:	0109c83a 	sub	r4,zero,r4
    25c0:	01c00044 	movi	r7,1
    25c4:	003fe706 	br	2564 <_gp+0xffff7e2c>
    25c8:	00c00044 	movi	r3,1
    25cc:	003ff106 	br	2594 <_gp+0xffff7e5c>

000025d0 <__udivsi3>:
    25d0:	200d883a 	mov	r6,r4
    25d4:	2900152e 	bgeu	r5,r4,262c <__udivsi3+0x5c>
    25d8:	28001416 	blt	r5,zero,262c <__udivsi3+0x5c>
    25dc:	00800804 	movi	r2,32
    25e0:	00c00044 	movi	r3,1
    25e4:	00000206 	br	25f0 <__udivsi3+0x20>
    25e8:	10000e26 	beq	r2,zero,2624 <__udivsi3+0x54>
    25ec:	28000516 	blt	r5,zero,2604 <__udivsi3+0x34>
    25f0:	294b883a 	add	r5,r5,r5
    25f4:	10bfffc4 	addi	r2,r2,-1
    25f8:	18c7883a 	add	r3,r3,r3
    25fc:	293ffa36 	bltu	r5,r4,25e8 <_gp+0xffff7eb0>
    2600:	18000826 	beq	r3,zero,2624 <__udivsi3+0x54>
    2604:	0005883a 	mov	r2,zero
    2608:	31400236 	bltu	r6,r5,2614 <__udivsi3+0x44>
    260c:	314dc83a 	sub	r6,r6,r5
    2610:	10c4b03a 	or	r2,r2,r3
    2614:	1806d07a 	srli	r3,r3,1
    2618:	280ad07a 	srli	r5,r5,1
    261c:	183ffa1e 	bne	r3,zero,2608 <_gp+0xffff7ed0>
    2620:	f800283a 	ret
    2624:	0005883a 	mov	r2,zero
    2628:	f800283a 	ret
    262c:	00c00044 	movi	r3,1
    2630:	003ff406 	br	2604 <_gp+0xffff7ecc>

00002634 <__umodsi3>:
    2634:	2005883a 	mov	r2,r4
    2638:	2900122e 	bgeu	r5,r4,2684 <__umodsi3+0x50>
    263c:	28001116 	blt	r5,zero,2684 <__umodsi3+0x50>
    2640:	01800804 	movi	r6,32
    2644:	00c00044 	movi	r3,1
    2648:	00000206 	br	2654 <__umodsi3+0x20>
    264c:	30000c26 	beq	r6,zero,2680 <__umodsi3+0x4c>
    2650:	28000516 	blt	r5,zero,2668 <__umodsi3+0x34>
    2654:	294b883a 	add	r5,r5,r5
    2658:	31bfffc4 	addi	r6,r6,-1
    265c:	18c7883a 	add	r3,r3,r3
    2660:	293ffa36 	bltu	r5,r4,264c <_gp+0xffff7f14>
    2664:	18000626 	beq	r3,zero,2680 <__umodsi3+0x4c>
    2668:	1806d07a 	srli	r3,r3,1
    266c:	11400136 	bltu	r2,r5,2674 <__umodsi3+0x40>
    2670:	1145c83a 	sub	r2,r2,r5
    2674:	280ad07a 	srli	r5,r5,1
    2678:	183ffb1e 	bne	r3,zero,2668 <_gp+0xffff7f30>
    267c:	f800283a 	ret
    2680:	f800283a 	ret
    2684:	00c00044 	movi	r3,1
    2688:	003ff706 	br	2668 <_gp+0xffff7f30>
